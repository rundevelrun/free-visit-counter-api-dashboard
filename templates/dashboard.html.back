{% extends "layout.html" %}

{% block title %}{{ _('Dashboard - Visitor Counter') }}{% endblock %}

{% block content %}
<section class="dashboard">
    <div class="dashboard-header">
        <h1>{{ _('Visitor Statistics for') }} <span class="domain-name">{{ site.domain }}</span></h1>
        <div class="date-range-selector">
            <select id="date-range">
                <option value="day">{{ _('Today') }}</option>
                <option value="yesterday">{{ _('Yesterday') }}</option>
                <option value="week">{{ _('This Week') }}</option>
                <option value="month">{{ _('This Month') }}</option>
                <option value="year">{{ _('This Year') }}</option>
                <option value="all">{{ _('All Time') }}</option>
            </select>
        </div>
    </div>
    
    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-title">{{ _('Today') }}</div>
            <div class="stat-value">{{ site.today_count }}</div>
            <div class="stat-change positive">+<span id="today-change">0</span>%</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">{{ _('This Week') }}</div>
            <div class="stat-value" id="week-count">--</div>
            <div class="stat-change positive">+<span id="week-change">0</span>%</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">{{ _('This Month') }}</div>
            <div class="stat-value" id="month-count">--</div>
            <div class="stat-change positive">+<span id="month-change">0</span>%</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">{{ _('Total') }}</div>
            <div class="stat-value">{{ site.total_count }}</div>
            <div class="stat-info">{{ _('Since') }} <span id="since-date">--</span></div>
        </div>
    </div>
    
    <div class="chart-container">
        <canvas id="visitors-chart"></canvas>
    </div>
    
    <div class="dashboard-sections">
        <div class="dashboard-section">
            <h2>{{ _('Integration Code') }}</h2>
            <p>{{ _('Add this code to your website to track visitors:') }}</p>
            <pre><code>&lt;script&gt;
  (function() {
    const domain = encodeURIComponent('{{ site.domain }}');
    const timezone = encodeURIComponent(Intl.DateTimeFormat().resolvedOptions().timeZone);
    
    fetch('https://visitor.6developer.com/visit', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ domain, timezone })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Visitor count:', data);
      // You can display the count on your page
      if (document.getElementById('visitor-count')) {
        document.getElementById('visitor-count').textContent = data.totalCount;
      }
    })
    .catch(error => console.error('Error:', error));
  })();
&lt;/script&gt;</code></pre>
            <button id="copy-code" class="btn secondary">{{ _('Copy Code') }}</button>
        </div>
        
        <div class="dashboard-section">
            <h2>{{ _('Display Options') }}</h2>
            <p>{{ _('Add this HTML to display the visitor count on your website:') }}</p>
            <pre><code>&lt;div class="visitor-counter"&gt;
  {{ _('Visitors') }}: &lt;span id="visitor-count"&gt;0&lt;/span&gt;
&lt;/div&gt;</code></pre>
            <button id="copy-display" class="btn secondary">{{ _('Copy Code') }}</button>
        </div>
    </div>
</section>
{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Sample data - in a real implementation, this would be fetched from the server
    const sampleData = {
        day: {
            labels: Array.from({length: 24}, (_, i) => `${i}:00`),
            values: Array.from({length: 24}, () => Math.floor(Math.random() * 50))
        },
        yesterday: {
            labels: Array.from({length: 24}, (_, i) => `${i}:00`),
            values: Array.from({length: 24}, () => Math.floor(Math.random() * 40))
        },
        week: {
            labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
            values: Array.from({length: 7}, () => Math.floor(Math.random() * 200))
        },
        month: {
            labels: Array.from({length: 30}, (_, i) => `${i+1}`),
            values: Array.from({length: 30}, () => Math.floor(Math.random() * 500))
        },
        year: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            values: Array.from({length: 12}, () => Math.floor(Math.random() * 2000))
        },
        all: {
            labels: Array.from({length: 12}, (_, i) => `${new Date().getFullYear() - (11-i)}`),
            values: Array.from({length: 12}, (_, i) => Math.floor(Math.random() * 5000 * (i+1)))
        }
    };
    
    // Initialize chart
    let visitorsChart;
    
    function initChart(range = 'day') {
        const ctx = document.getElementById('visitors-chart').getContext('2d');
        const data = sampleData[range];
        
        if (visitorsChart) {
            visitorsChart.destroy();
        }
        
        visitorsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: data.labels,
                datasets: [{
                    label: '{{ _('Visitors') }}',
                    data: data.values,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(200, 200, 200, 0.1)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }
    
    // Update stats based on selected range
    function updateStats(range) {
        // In a real implementation, these would be calculated from actual data
        document.getElementById('week-count').textContent = sampleData.week.values.reduce((a, b) => a + b, 0);
        document.getElementById('month-count').textContent = sampleData.month.values.reduce((a, b) => a + b, 0);
        
        document.getElementById('today-change').textContent = Math.floor(Math.random() * 20);
        document.getElementById('week-change').textContent = Math.floor(Math.random() * 15);
        document.getElementById('month-change').textContent = Math.floor(Math.random() * 10);
        
        // Format date as "MMM DD, YYYY"
        const createdDate = new Date();
        createdDate.setMonth(createdDate.getMonth() - 6);
        document.getElementById('since-date').textContent = createdDate.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        initChart();
        updateStats('day');
        
        // Handle date range changes
        document.getElementById('date-range').addEventListener('change', function() {
            initChart(this.value);
            updateStats(this.value);
        });
        
        // Copy code buttons
        document.getElementById('copy-code').addEventListener('click', function() {
            const codeBlock = this.previousElementSibling.textContent;
            navigator.clipboard.writeText(codeBlock)
                .then(() => {
                    this.textContent = '{{ _('Copied!') }}';
                    setTimeout(() => {
                        this.textContent = '{{ _('Copy Code') }}';
                    }, 2000);
                });
        });
        
        document.getElementById('copy-display').addEventListener('click', function() {
            const codeBlock = this.previousElementSibling.textContent;
            navigator.clipboard.writeText(codeBlock)
                .then(() => {
                    this.textContent = '{{ _('Copied!') }}';
                    setTimeout(() => {
                        this.textContent = '{{ _('Copy Code') }}';
                    }, 2000);
                });
        });
    });
</script>
{% endblock %}